<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Will Koehler</title>
 <link href="http://willkoehler.net/atom.xml" rel="self"/>
 <link href="http://willkoehler.net"/>
 <updated>2019-05-20T17:51:22-04:00</updated>
 <id>http://willkoehler.net/atom.xml</id>
 <author>
   <name>Will Koehler</name>
   <uri>http://willkoehler.net</uri>
 </author>
 
 
 <entry>
   <title>Alternate Route Options For The Olentangy Trail</title>
   <link href="http://willkoehler.net/2014/12/22/alternate-route-options-for-the-olentangy-trail.html"/>
   <published>2014-12-22T00:00:00-05:00</published>
   <updated>2015-01-05T12:00:00-04:00</updated>
   <id>http://willkoehler.net/2014/12/22/alternate-route-options-for-the-olentangy-trail</id>
   <content type="html">&lt;p&gt;The Olentangy trail will be closed under the 315/270 interchange for approximately 12 months while
ODOT &lt;a href=&quot;http://www.dot.state.oh.us/projects/I-270/Pages/WhatWeAreDoing.aspx#315&quot;&gt;rebuilds part of the 315/270 interchange&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inconvenience and detours come along with any road construction, and the 315/270 project is no exception.
With that said, the north section of the Olentangy Trail is one of the busiest multi-use trails in the
state, with a volume of over 700 users per day. Some of this traffic is discretionary and will taper off
during the trail closure. But for a significant number of cyclists, this section of trail is a vital
transportation corridor connecting the northern suburbs to Worthington, Clintonville, OSU and downtown.&lt;/p&gt;

&lt;p&gt;This document outlines options to create a safe alternate route for trail traffic while the Olentangy Trail
is closed under the 315/270 interchange.&lt;/p&gt;

&lt;p&gt;The routes proposed will not only serve to keep bike traffic flowing safely during this
construction but will create new connections between neighborhoods and the Olentangy Trail, providing
valuable service well beyond the scope of the 315/270 project.&lt;/p&gt;

&lt;h2 id=&quot;route-options&quot;&gt;Route Options&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Wilson Bridge Road Option&lt;/strong&gt; &lt;span class=&quot;muted&quot;&gt;(marked in red)&lt;/span&gt;: This is the recommended route. It’s
both safe and cost effective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;161 / Olentangy River Road Option&lt;/strong&gt; &lt;span class=&quot;muted&quot;&gt;(marked in blue)&lt;/span&gt;: While this route has benefits,
and should be kept under consideration for long-term improvements, it has significant safety challenges.
Improvements required for this route may be beyond the scope of the project.&lt;/p&gt;

&lt;div class=&quot;map_container full&quot;&gt;
  &lt;a class=&quot;overlay&quot; href=&quot;https://mapsengine.google.com/maps/d/viewer?mid=zEAPhiHiDgA8.kJ15f3nMBWE8&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;
  &lt;iframe src=&quot;https://mapsengine.google.com/map/u/0/embed?mid=zEAPhiHiDgA8.kJ15f3nMBWE8&amp;amp;z=14&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wilson-bridge-road&quot;&gt;Wilson Bridge Road&lt;/h2&gt;

&lt;h4 id=&quot;add-new-bike-and-pedestrian-park-entrance&quot;&gt;Add new bike and pedestrian park entrance&lt;/h4&gt;

&lt;p&gt;Build trail spur from south side of skate park to a new bike and pedestrian entrance at the bottom
of the hill on Wilson Bridge Road &lt;span class=&quot;muted smaller&quot;&gt;(‘A’ on map)&lt;/span&gt;. Adding a new
entrance has several advantages over using the existing park entrance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduces distance travelled on Wilson Bridge by half.&lt;/li&gt;
  &lt;li&gt;Eliminates conflict between bike and car traffic at the park entrance.&lt;/li&gt;
  &lt;li&gt;Removes the hill.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;add-bike-lanes&quot;&gt;Add bike lanes&lt;/h4&gt;

&lt;p&gt;Reduce lane width on Wilson Bridge Road from 12’ to 11’, making room for 4’ bike lanes. Add green
paint to bike lanes along the curved sections to increase visibility and discourage cars from
drifting into the bike lane (taking the “racing line”).&lt;/p&gt;

&lt;p&gt;Ring up utility covers, bringing them up to even height with the road.&lt;/p&gt;

&lt;p&gt;Add bike-friendly grids to the
&lt;a href=&quot;https://www.flickr.com/photos/108988395@N05/15989372446/in/set-72157647422248523&quot;&gt;drainage grates&lt;/a&gt;
on the bridge over 315, bringing them up to even height with the road. &lt;span class=&quot;muted smaller&quot;&gt;(‘G’ on map)&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;cut-vegetation-to-improve-sight-lines&quot;&gt;Cut vegetation to improve sight lines&lt;/h4&gt;

&lt;p&gt;Cut back honeysuckle along inside of curve to improve sight lines. This will help eastbound cars
see bikes turning into the lower park entrance. &lt;span class=&quot;muted smaller&quot;&gt;(‘B’ on map)&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;add-treatments-for-left-turn-at-park-entrance&quot;&gt;Add treatments for left turn at park entrance&lt;/h4&gt;

&lt;p&gt;Add treatments to help bikes merge into the travel lane and make the left turn into the park
&lt;span class=&quot;muted smaller&quot;&gt;(‘A’ on map)&lt;/span&gt;. Suggested treatments are sharrows showing the
left-turn movement and a sign along the eastbound lane indicating cars should yield to left-turning
bikes. See image below.&lt;/p&gt;

&lt;p&gt;Because of the high volume of traffic on Wilson Bridge, merging into the lane to turn left may be
challenging, even with the above treatments. A left-turn refuge box should be added to give
bikes a safe spot to wait if they are unable to make the turn.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/sharrow-left-turn-wilson-bridge.jpg&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;linworth-road&quot;&gt;Linworth Road&lt;/h2&gt;

&lt;h4 id=&quot;add-bike-lanes-to-linworth-road-north-of-bluffway-dr&quot;&gt;Add bike lanes to Linworth Road north of Bluffway Dr&lt;/h4&gt;

&lt;p&gt;Pave shoulder and add bike lanes between Bluffway Dr. and Hard Road New pavement should be smooth
with minimal seam between new and existing pavement.&lt;/p&gt;

&lt;h4 id=&quot;add-bike-boxes-at-hard-road-intersection&quot;&gt;Add bike boxes at Hard Road intersection&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://urbanmilwaukee.com/2014/10/24/bike-czar-tosa-installs-first-bike-box-in-metro-area/&quot;&gt;Bike boxes&lt;/a&gt;
allow bikes to move up to the front of stopped traffic during the red light cycle and get a head start
into the intersection when the light turns green. &lt;span class=&quot;muted smaller&quot;&gt;(‘C’ on map)&lt;/span&gt;
This reduces right hooks and other conflicts that occur when bikes and cars are mixed going into an
intersection.&lt;/p&gt;

&lt;p&gt;There is also an ongoing problem with cars passing and cutting off bikes to turn right on Hard Road from
Linworth Road. Adding a 50ft section of green paint in the Linworth bike lane approaching the intersection
may help highlight the presence of bikes. See image below.&lt;/p&gt;

&lt;p&gt;Since bike boxes are fairly new in Columbus, an education campaign is recommended to teach cyclists and
drivers &lt;a href=&quot;https://www.portlandoregon.gov/transportation/article/185112&quot;&gt;how to use the bike boxes&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/linworth-road-bike-boxes.jpg&quot; /&gt;&lt;/div&gt;

&lt;h4 id=&quot;add-treatments-for-left-turn-onto-linworth-road-e&quot;&gt;Add treatments for left turn onto Linworth Road E.&lt;/h4&gt;

&lt;p&gt;Add treatments to help bikes merge into the travel lane and make the left turn onto Linworth Road E.
&lt;span class=&quot;muted smaller&quot;&gt;(‘D’ on map)&lt;/span&gt; One possibility is to add sharrows showing the
left-turn movement and a sign along the southbound lane indicating cars should yield to left-turning
bikes. See image below. Another possibility is to add a 4-way stop at the intersection.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/sharrow-left-turn-linworth.jpg&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;neighborhood-roads&quot;&gt;Neighborhood Roads&lt;/h2&gt;

&lt;p&gt;For the remainder of the route into Worthington Hills (Sefton Park Dr, Rutherglen Dr, Southview Dr,
Clubview Blvd) add sharrows and signs indicating shared use road. Speed bumps may also be added
in the future since there is a high volume of cut-through traffic along this route.&lt;/p&gt;

&lt;h2 id=&quot;olentangy-river-road--161-option&quot;&gt;Olentangy River Road / 161 Option&lt;/h2&gt;

&lt;p&gt;The second route option requires treatments along Olentangy River Road and State Route 161. Although
this route is not recommended for the current project, it should be kept under consideration for a
future project. For completeness the findings are documented below.&lt;/p&gt;

&lt;h2 id=&quot;olentangy-river-road&quot;&gt;Olentangy River Road&lt;/h2&gt;

&lt;p&gt;There is a multi-use trail along the south half of Olentangy River Road. The trail ends just
south of Snouffer Road The northern section of Olentangy River Road is narrow with no shoulder and
limited sight lines. &lt;span class=&quot;muted smaller&quot;&gt;(‘H’ on map)&lt;/span&gt; Widening Olentangy River Road
would require a major reconstruction. Extending the multi-use trail is equally challenging.&lt;/p&gt;

&lt;p&gt;Adding sharrows to this section would probably not achieve a sufficient level of safety.
There are limited places to pass along this section of road. Even if the speed limit
were reduced from 45 mph to 35 mph, there would still be a significant speed difference
between cars and bikes, creating pressure for cars to pass bikes where it’s not safe.&lt;/p&gt;

&lt;h2 id=&quot;state-route-161&quot;&gt;State Route 161&lt;/h2&gt;

&lt;h4 id=&quot;315-southbound-exit-ramp&quot;&gt;315 southbound exit ramp&lt;/h4&gt;

&lt;p&gt;There is near continuous movement of cars turning right on red from the right-only lane. Drivers are
looking left for other cars and are not expecting bikes, especially contraflow bike traffic from the
right. As a result, even with the walk light, it’s unsafe to cross this exit ramp while cars are present
in the right-only lane. See photo below. &lt;span class=&quot;muted smaller&quot;&gt; (‘E’ on map)&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/315-southbound-exit.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Adding “No right on red” would help significantly, but seems heavy-handed given current levels of bike
traffic. Another possibility is to install a lighted “Caution bikes / No turn on red” sign that’s
activated by the pedestrian crossing button. This sign could be supplemented with crossing treatment
to raise awareness of the bike crossing. See image below for one possibility.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/315-southbound-exit-treatment.jpg&quot; /&gt;&lt;/div&gt;

&lt;h4 id=&quot;315-northbound-entrance-ramp&quot;&gt;315 northbound entrance ramp&lt;/h4&gt;

&lt;p&gt;This entrance ramp has numerous problems. There are conflicts between bikes crossing the entrance
ramp and cars turning onto the entrance ramp from both the right and the left. Drivers are focused on
movement of other cars and often do not see bikes, especially contraflow bike traffic from the west.
In addition the exit of the bike underpass is located partway down the entrance ramp with poor
visibility and no safety zone to wait for a safe opportunity to cross. See photo below. &lt;span class=&quot;muted smaller&quot;&gt;(‘F’ on map)&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/315-northbound-entrance.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;The recommended solution is to add a bike-only signal phase with diagonal crossing. The signal phase
would be activated by cyclists, either with a button or in-ground detectors. During the bike-only
signal phase, bikes would have a green signal. All other directions would have a red signal, allowing
bikes to cross diagonally. See image below. A lighted “Caution bikes / No turn on red” sign would also
be needed for the 315 southbound exit ramp. This sign would be lit during the bike-only signal phase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/maps/@45.5285205,-122.6657424,3a,75y,340.97h,73.06t/data=!3m4!1e1!3m2!1sq47qxmXLP7pKCH7bdCtmnQ!2e0!5m1!1e3?hl=en&quot;&gt;Similar designs&lt;/a&gt;
are used in other cities.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/161-diagonal-crossing.jpg&quot; /&gt;&lt;/div&gt;

&lt;h4 id=&quot;sidewalk-between-315-entrance-ramps&quot;&gt;Sidewalk between 315 entrance ramps&lt;/h4&gt;

&lt;p&gt;Differential settling has &lt;a href=&quot;https://www.flickr.com/photos/108988395@N05/15989238176/in/set-72157647422248523&quot;&gt;created seams&lt;/a&gt;
along the line of travel. Sections of the sidewalk should be replaced to fix the seams.&lt;/p&gt;

&lt;p&gt;Ideally a concrete safety wall should be added similar to the wall on the Olentangy Trail at
&lt;a href=&quot;https://www.google.com/maps/@40.051834,-83.030313,3a,75y,266.81h,82.94t/data=!3m4!1e1!3m2!1sqKjCx_ut2DXOukymzJCERg!2e0!5m1!1e3?hl=en&quot;&gt;Henderson Road&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wayfinding-signage&quot;&gt;Wayfinding Signage&lt;/h2&gt;

&lt;p&gt;Add wayfinding signage along route. Follow Columbus’s current bike route sign standards. Refer to signs
between Henderson Road side path and Olentangy trail for an example.&lt;/p&gt;

&lt;div class=&quot;full rounded shadow&quot;&gt;&lt;img src=&quot;/images/olentangy-trail/bike-route-wayfinding-sign.jpg&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;bike-lane-maintenance&quot;&gt;Bike lane maintenance&lt;/h2&gt;

&lt;p&gt;Bike tires are susceptible to punctures from road debris that builds up in bike lanes. As debris builds up,
cyclists will start to avoid the bike lanes and ride in the travel lanes.&lt;/p&gt;

&lt;p&gt;Bi-weekly sweeping is recommended to keep the bike lanes free of debris.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;The recommendations in this document are the results of a reconnaissance ride and meeting on Dec 13, 2014
attended by ODOT representatives and cycling advocates. Thank you, ODOT, for helping us review the route
options. Thank you, Rick Jordon, for taking &lt;a href=&quot;https://www.flickr.com/photos/108988395@N05/sets/72157647422248523/&quot;&gt;photos of the ride&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Will Koehler &lt;span class=&quot;muted&quot;&gt;- Cycling advocate&lt;/span&gt;&lt;br /&gt;
Chris Fischer &lt;span class=&quot;muted&quot;&gt;- Cycling advocate&lt;/span&gt;&lt;br /&gt;
Paul Dorothy &lt;span class=&quot;muted&quot;&gt;- Worthington Bike/Ped Committee&lt;/span&gt;&lt;br /&gt;
Rachael Dorothy &lt;span class=&quot;muted&quot;&gt;- Worthington City Council&lt;/span&gt;&lt;br /&gt;
Rick Jordon &lt;span class=&quot;muted&quot;&gt;- Photographer&lt;/span&gt;&lt;br /&gt;
Kris Anderson &lt;span class=&quot;muted&quot;&gt;- RIDEHome Bike Shop&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;ODOT is accepting public feedback on the trail closure through January 9th. If you like the
recommendations in this document, or you have ideas of your own, contact Brian Davidson at ODOT:
&lt;a href=&quot;mailto:brian.davidson@dot.state.oh.us?subject=Olentangy Trail Closure&quot;&gt;brian.davidson@dot.state.oh.us&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more about the Olentangy Trail closure and the North Side Fix on
&lt;a href=&quot;http://www.dot.state.oh.us/projects/I-270/Pages/WhatWeAreDoing.aspx#315&quot;&gt;ODOT’s site&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client-Side Solution For Downloading Highcharts Charts as Images</title>
   <link href="http://willkoehler.net/2014/11/07/client-side-solution-for-downloading-highcharts-charts-as-images.html"/>
   <published>2014-11-07T00:00:00-05:00</published>
   <updated>2016-01-29T12:00:00-04:00</updated>
   <id>http://willkoehler.net/2014/11/07/client-side-solution-for-downloading-highcharts-charts-as-images</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.highcharts.com&quot;&gt;Highcharts&lt;/a&gt; is an excellent web-based charting package. But, because it’s a
client-side solution, downloading charts as images is tricky. The default solution is to use
Highcarts’ &lt;a href=&quot;http://www.highcharts.com/docs/export-module/export-module-overview&quot;&gt;export module&lt;/a&gt;,
which posts the chart’s SVG code to Highcharts’ export server. The export server converts the chart
to an image and then sends it back to the browser.&lt;/p&gt;

&lt;p&gt;The export server is a well-executed solution and should work for most situations. However for my latest project,
the charts contain sensitive data. Sending them to a third-party server is not possible. I considered setting
up my own export server, or adding an endpoint to my web application. But both these solutions add complexity
to the server for a task that theoretically can be handled in the client.&lt;/p&gt;

&lt;p&gt;In this blog post, I explore various client-side solutions to downloading Highcharts as images.&lt;/p&gt;

&lt;h2 id=&quot;strategy&quot;&gt;Strategy&lt;/h2&gt;

&lt;p&gt;Highcharts are rendered as &lt;a href=&quot;http://www.sitepoint.com/svg-scalable-vector-graphics-overview/&quot;&gt;SVG (scalable vector graphics)&lt;/a&gt;.
The basic steps to download a chart as an image are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the chart’s SVG code&lt;/li&gt;
  &lt;li&gt;Render the SVG onto a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cavas&amp;gt;&lt;/code&gt; element&lt;/li&gt;
  &lt;li&gt;Use toDataURL() to extract the canvas contents as an image&lt;/li&gt;
  &lt;li&gt;Save this image to the local filesystem&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-example-code&quot;&gt;The Example Code&lt;/h2&gt;

&lt;p&gt;Let’s start with a basic chart and download button.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'container'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'save_btn'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Save Chart&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;save_chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// TODO&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highcharts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;exporting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Client-Side Download Example'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'area'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;xAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Jan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Feb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Apr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'May'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jun'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Jul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Aug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Oct'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nov'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Dec'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;29.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;71.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;106.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;129.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;144.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;176.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;135.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;148.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;216.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;194.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;95.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;54.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#save_btn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;save_chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highcharts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;1-get-the-charts-svg-code&quot;&gt;1. Get the chart’s SVG code&lt;/h2&gt;

&lt;p&gt;Highcharts has an exporting module that adds functions for downloading and printing charts. This module
must be included separately.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://code.highcharts.com/modules/exporting.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The exporting module adds the function &lt;a href=&quot;http://api.highcharts.com/highcharts#Chart.getSVG&quot;&gt;getSVG&lt;/a&gt;
which extracts the chart’s SVG code and sanitizes it for export.&lt;/p&gt;

&lt;p&gt;NOTE: Because we don’t specify a hard-coded chart width in our css, we need to specify sourceWidth and
sourceHeight in the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;getSVG&lt;/code&gt;. This seems like a bug to me. &lt;code class=&quot;highlighter-rouge&quot;&gt;getSVG&lt;/code&gt; should be able to calculate
the chart dimensions itself. (If we can get the dimensions from chart.chartWidth / chart.chartHeight,
&lt;code class=&quot;highlighter-rouge&quot;&gt;getSVG&lt;/code&gt; could too)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;exporting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sourceWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sourceHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartHeight&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NOTE: Alternatively, you could grab the chart’s SVG code directly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#container .highcharts-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this eliminates the need for the exporting module, it also skips the sanitizing code. The most
obvious problem I ran into is that the resulting image may contain tooltips, which you probably don’t
want in your downloaded chart image.&lt;/p&gt;

&lt;h2 id=&quot;2-render-the-charts-svg-onto-a-canvas-element&quot;&gt;2. Render the chart’s SVG onto a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;p&gt;Rendering SVG onto a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element is easy. You can put SVG into the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; attribute of an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt;
tag. The browser will render the SVG into the image. Once the image has been rendered, you render this
image onto the canvas element. You don’t even need to insert the image into the DOM for this to work.&lt;/p&gt;

&lt;p&gt;To show how this works, we’ll create a preliminary version of &lt;code class=&quot;highlighter-rouge&quot;&gt;save_chart&lt;/code&gt; that renders the chart’s SVG
onto a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;EXPORT_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;save_chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EXPORT_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartWidth&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Get the cart's SVG code&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exporting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sourceWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sourceHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chartHeight&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create a canvas&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'canvas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create an image and draw the SVG onto the canvas&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'data:image/svg+xml;base64,'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NOTE: Since we typically want to download a chart in a higher resolution than it’s displayed on the page,
we use EXPORT_WIDTH to control the size of the exported image.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://jsfiddle.net/willkoehler/1p81fbzs/&quot;&gt;JSFiddle demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-use-todataurl-to-extract-the-canvas-contents-as-an-image&quot;&gt;3. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;toDataURL&lt;/code&gt; to extract the canvas contents as an image&lt;/h2&gt;

&lt;p&gt;The canvas element has a handy function &lt;code class=&quot;highlighter-rouge&quot;&gt;toDataURL&lt;/code&gt; that extracts its content as an image.
&lt;code class=&quot;highlighter-rouge&quot;&gt;toDataURL&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs&quot;&gt;data URI&lt;/a&gt; with
the image encoded in base64. This URI can then be downloaded as an image to the user’s computer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (still need to define this)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NOTE: We don’t need to to add the canvas element to the DOM in order to render and extract the
image data. So we can remove &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.appendChild(canvas)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-save-the-image-to-the-local-filesystem&quot;&gt;4. Save the image to the local filesystem&lt;/h2&gt;

&lt;p&gt;This is where things get a little hacky. There is no standard way to save data to the user’s
local filesystem. The most widely used technique is to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag and then send
it a click event.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;download&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag tells the browser to present the target (our chart
image) as a downloadable file with a given filename. Pretty nice, but it’s currently only
supported in Chrome and Firefox. Other browsers will just open the image in the current window
instead of presenting it as a download. Not ideal, but it’s the best we can do for now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s everything. See this &lt;a href=&quot;http://jsfiddle.net/willkoehler/hc6aa7yg/&quot;&gt;JSFiddle demo&lt;/a&gt;
for the complete code.&lt;/p&gt;

&lt;h2 id=&quot;not-quite-so-fast&quot;&gt;Not quite so fast&lt;/h2&gt;

&lt;p&gt;So everything looks good… except it doesn’t work in IE. The first problem is that IE throws a
“SecurityError” on the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;toDataURL&lt;/code&gt;. This is because IE considers the canvas to be
“tainted” once an SVG image has been rendered. SVG code can reference content from the user’s
local file system. Once that’s in the canvas element it would be security vulnerability
to allow the canvas contents to be extracted. Otherwise a malicious site could read data from
the user’s file system and send it on to an external server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://connect.microsoft.com/IE/feedback/details/809823/draw-svg-image-on-canvas-context&quot;&gt;This forum message&lt;/a&gt;
is the only reference I can find discussing the issue in IE. Either Chrome, Firefox, and Safari have
ways of sanitizing SVG content before rendering onto a canvas, or they don’t allow SVG code to
reference local content, or they are not concerned about this vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;ie-work-around-1-use-canvg&quot;&gt;IE work-around #1: use canvg&lt;/h2&gt;

&lt;p&gt;We can work-around the canvas tainting issue with the &lt;a href=&quot;https://github.com/gabelerner/canvg&quot;&gt;canvg library&lt;/a&gt;.
canvg is a full SVG parser and renderer. It can render SVG onto a canvas element with all of the features
of the browser’s built-in SVG render. It’s an impressive piece of code, and works flawlessly. But it’s
also 2800 lines of javascript that are entirely unnecessary in any modern browser, because the browser
itself can render SVG onto a canvas element. However, because canvg parses the SVG code by hand, manually
rendering each path, box, quadratic curve, gradient, pattern etc. it sidesteps the IE “SecurityError”.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;var image = new Image...&lt;/code&gt; code with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;canvg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scaleWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scaleHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ignoreDimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;still-not-working-url-limit&quot;&gt;Still not working… URL limit&lt;/h2&gt;

&lt;p&gt;With the “SecurityError” fix in place, we hit the next barrier. IE stops with the error
“The data area passed to a system call is too small” on the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;a.click()&lt;/code&gt;. I &lt;em&gt;think&lt;/em&gt;
this is because IE has a &lt;a href=&quot;http://support.microsoft.com/kb/208427&quot;&gt;2083 character URL limit&lt;/a&gt;.
The data URIs generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;toDataURL&lt;/code&gt; are much longer than 2083 characters.&lt;/p&gt;

&lt;h2 id=&quot;ie-work-around-2-use-mssaveoropenblob&quot;&gt;IE work-around #2: use &lt;code class=&quot;highlighter-rouge&quot;&gt;msSaveOrOpenBlob&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I’m calling this a work-around. But it’s actually an improvement over the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag hack.
IE has a function &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/hh779016(v=vs.85).aspx&quot;&gt;msSaveOrOpenBlob&lt;/a&gt;
that presents client-side data to the user as if it were downloaded from the internet. It’s
exactly what we need. Let’s add logic to use &lt;code class=&quot;highlighter-rouge&quot;&gt;msSaveOrOpenBlob&lt;/code&gt; in IE and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag hack everywhere else.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;download_in_ie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;download_with_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Works in IE10 and newer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;download_in_ie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msSaveOrOpenBlob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msSaveOrOpenBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msToBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Works in Chrome and FF. Safari just opens image in current window, since&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// .download attribute is not supported&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;download_with_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;http://jsfiddle.net/willkoehler/vushe780/&quot;&gt;JSFiddle demo&lt;/a&gt; putting it all together.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;It took a while to get here, but the final solution isn’t bad. My main reservation is pulling in
canvg. But it’s a stable library and seems like a necessary tradeoff for IE support.&lt;/p&gt;

&lt;p&gt;A few other libraries that I tested along the way:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/eligrey/FileSaver.js/&quot;&gt;FileSaver.js&lt;/a&gt; - If you want a fully-supported,
cross-browser “just save it” solution, this is a good library. At its core, FileSaver.js uses
the same &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag hack I used above. But FileSaver.js has a lot of additional complexity
to handle edge cases that I didn’t feel was needed for this situation. I ultimately decided
not to use it. But it’s a solid library and Eli Grey has put a lot of work into making it work
flawlessly. Definitely work a look.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/eligrey/canvas-toBlob.js&quot;&gt;canvas-toBlob.js&lt;/a&gt; - If you use FileSaver.js, you will
need this library to pull the blob data out of the canvas element. It implements the standard
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement.toBlob&quot;&gt;canvas.toBlob()&lt;/a&gt;
function for browsers that don’t support it yet. It’s another solid piece of code by Eli Grey.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deploy a Rails App with AWS OpsWorks</title>
   <link href="http://willkoehler.net/2014/10/15/deploy-a-rails-app-with-aws-opsworks.html"/>
   <published>2014-10-15T00:00:00-04:00</published>
   <updated>2015-02-08T12:00:00-04:00</updated>
   <id>http://willkoehler.net/2014/10/15/deploy-a-rails-app-with-aws-opsworks</id>
   <content type="html">&lt;p&gt;Many of the Rails apps I build for my clients are custom, in-house tools with limited traffic. To
keep costs down and maximize performance, I run everything (web app, database, background jobs) on
a single server. Although Amazon OpsWorks is capable of managing applications running on multi-instance
clusters, it is equally capable of setting up a single-server application. This post describes
the steps I use to get a basic Rails app up and running on a single server.&lt;/p&gt;

&lt;h2 id=&quot;1-prepare-your-app&quot;&gt;1. Prepare your app&lt;/h2&gt;

&lt;h4 id=&quot;add-unicorn-to-the-gemfile&quot;&gt;Add “unicorn” to the Gemfile&lt;/h4&gt;

&lt;p&gt;OpsWorks supports Apache/Passenger and Nginx/Unicorn. They are both good solutions but I prefer
the simplicity and performance of Nginx. So for this project, we are using Nginx/Unicorn. Add
“unicorn” to the project Gemfile.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'unicorn'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;precompile-assets-on-deployment&quot;&gt;Precompile assets on deployment&lt;/h4&gt;

&lt;p&gt;There are lots of ways to serve Rails assets in production. OpsWorks doesn’t provide any direct
support for the Rails asset pipeline, leaving the solution up to you.&lt;/p&gt;

&lt;p&gt;For a single-server applications, I prefer to precompile the assets on the server during
deployment and serve them with Nginx from public/assets. The precompile step can be run from a chef
&lt;a href=&quot;http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-extend-hooks.html&quot;&gt;deploy hook&lt;/a&gt;.
Create &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy/before_symlink.rb&lt;/code&gt; in your app and add the contents below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Precompile assets. Assets are compiled into shared/assets and shared between deploys.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RAILS_ENV&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shared_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deploy_to&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/shared&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# create shared directory for assets, if it doesn't exist&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/assets&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0770&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# symlink current deploy's asset folder to shared assets each deploy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/public/assets&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/assets&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# precompile assets into public/assets (which is symlinked to shared assets folder)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake assets:precompile&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake assets:precompile&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RAILS_ENV'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails_env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check in your changes and push them to the repo/branch you will deploy from.&lt;/p&gt;

&lt;h2 id=&quot;2-create-a-stack&quot;&gt;2. Create a stack&lt;/h2&gt;

&lt;p&gt;An AWS stack is the container that houses all the other components (layers, instances, and apps)
and allows you to manage them as a unit.&lt;/p&gt;

&lt;p&gt;Login to the &lt;a href=&quot;https://aws.amazon.com/console/&quot;&gt;AWS management console&lt;/a&gt; and choose OpsWorks from the
Services menu. Click “Add Your First Stack”. All settings can be left at their default except:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Choose a name for your stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Default operating system&lt;/strong&gt;: Choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 14.04 LTS&lt;/code&gt; Rails needs a Javascript runtime to
precompile assets on the server. The Ubuntu nodejs package is the easiest way to install a
Javascript runtime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Default SSH key:&lt;/strong&gt; A SSH key is required to login to instances via SSH later. Follow
&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html&quot;&gt;these steps&lt;/a&gt;
to create a new keypair and then select that keypair here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/stack.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add Stack” to create the stack.&lt;/p&gt;

&lt;h2 id=&quot;3-create-a-rails-app-server-layer&quot;&gt;3. Create a “Rails App Server” layer&lt;/h2&gt;

&lt;p&gt;An OpsWorks layer is a collection of packages, scripts, and settings to configure an
instance for a particular purpose (such as running a Rails app). In our case, we are going to
create two layers: “Rails App Server” and “MySQL”. Both these layers will be assigned to the
same instance, which creates a single server running the Rails app and a MySQL database.&lt;/p&gt;

&lt;p&gt;Click “Add a layer” and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails App Server&lt;/code&gt; as the layer type. Choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx and Unicorn&lt;/code&gt;
as the rails stack. Leave all other settings at their default.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/create_rails_app_layer.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add Layer” to create the layer.&lt;/p&gt;

&lt;p&gt;After creating the layer, we need to edit it to add the nodejs package. Click “Recipes” to
show the layer’s recipes. Then click “Edit”. Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;nodejs&lt;/code&gt; package under “OS Packages”.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/edit_rails_app_layer.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Save” to save your changes.&lt;/p&gt;

&lt;p&gt;If your stack is running in a Virtual Private Cloud, you will need to configure the layer to
allocate a public IP address. By default, instances created in a VPC don’t get a public IP.
Click “Network”, then click “Edit” and enable “Elastic IP addresses”.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/edit_rails_app_layer_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Save” to save your changes.&lt;/p&gt;

&lt;h2 id=&quot;4-create-a-mysql-layer&quot;&gt;4. Create a MySQL layer&lt;/h2&gt;

&lt;p&gt;Use the Navigation menu to go back to the Layers page. Add a new layer by clicking “+ Layer”
and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; as the layer type. Leave all settings as their default. You don’t need to
remember the MySQL root user password. OpsWorks will manage everything for you, including
creating your &lt;code class=&quot;highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/create_mysql_layer.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add Layer” to create the layer.&lt;/p&gt;

&lt;h2 id=&quot;5-create-an-instance&quot;&gt;5. Create an instance&lt;/h2&gt;

&lt;p&gt;We’ve configured the software that will run on the server. Next we create the instance
itself, which is the server that will run our application. Use the Navigation menu to go to
the Instances page. Click “Add an instance” under “Rails App Server”. Leave all the settings
at their defaults.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/create_instance.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add Instance” to create the instance.&lt;/p&gt;

&lt;p&gt;We are now going to add the MySQL layer to the instance we just created, so both the
Rails app and MySQL will run on the same instance. Click “Add an instance”
under “MySQL”. Choose the “Existing” tab and check the box next to your instance (&lt;code class=&quot;highlighter-rouge&quot;&gt;rails-app1&lt;/code&gt;
in this case).&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/add_mysql_to_instance.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add Instance” to assign the MySQL layer to the Rails app instance.&lt;/p&gt;

&lt;h2 id=&quot;6-add-an-application&quot;&gt;6. Add an application&lt;/h2&gt;

&lt;p&gt;We’ve finished configuring our server, now it’s time to setup the application we are going
to run on the server. Use the Navigation menu to go to the Apps page. Click “Add an app” to
create an application. Leave settings at their default except:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Choose a name for your application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data source type:&lt;/strong&gt; Choose “OpsWorks”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Database instance:&lt;/strong&gt; Choose the instance we just created.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Application Source:&lt;/strong&gt; There are many options to give OpsWorks access to your application’s
source code. I use GitHub with a &lt;a href=&quot;https://developer.github.com/guides/managing-deploy-keys/#deploy-keys&quot;&gt;deploy key&lt;/a&gt;.
You can also use Subversion, HTTP, or S3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Environment Variables:&lt;/strong&gt; Add any environment variables needed by your app here. Environment
variables are &lt;a href=&quot;http://12factor.net/config&quot;&gt;one solution&lt;/a&gt; for managing Rails app secrets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain name:&lt;/strong&gt; You can leave this blank since we only have one app in the stack.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/create_app.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Add App” to create the application.&lt;/p&gt;

&lt;h2 id=&quot;7-adjust-innodb_buffer_pool_size&quot;&gt;7. Adjust innodb_buffer_pool_size&lt;/h2&gt;

&lt;p&gt;The MySQL recipe in OpsWorks is optimized to run MySQL on a dedicated server. Out of the box a
majority of the server memory will be allocated to MySQL. Depending on the instance size, the
combination of Rails workers and MySQL may exhaust memory and the instance will fail to start.&lt;/p&gt;

&lt;p&gt;To fix this, we need to reduce &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_buffer_pool_size&lt;/code&gt;. Use the Navigation menu to go to the
Stack page. Click “Stack Settings” and then “Edit”. Under “Configuration Management” add the
following Custom JSON&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tunable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;innodb_buffer_pool_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100M&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The specific size of &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_buffer_pool_size&lt;/code&gt; depends on your application and instance size.
For a small, single-server application 100 megabytes should be plenty.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/stack_configuration_1.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Save” to save your changes.&lt;/p&gt;

&lt;h2 id=&quot;8-enable-far-future-cache-headers&quot;&gt;8. Enable far-future cache headers&lt;/h2&gt;

&lt;p&gt;For best performance, it’s recommended to set “far-future” headers on your assets, effectively
instructing the browser to cache the assets forever. Unfortunately OpsWorks doesn’t do this out of the
box and there’s no clean way to add it. The only solution I’ve found is to create a custom cookbook,
copy &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx_unicorn_web_app.erb&lt;/code&gt; from the AWS cookbook and customize it to add the correct asset headers.&lt;/p&gt;

&lt;p&gt;To incorporate this updated recipe into our application, we need to edit the stack settings and add
a custom cookbook. Use the Navigation menu to go to the Stack page. Click “Stack Settings” and then
“Edit”. Under “Configuration Management”, turn on “Use custom Chef cookbooks”
and point it to my custom OpsWorks cookbook &lt;a href=&quot;https://github.com/willkoehler/opsworks-cookbooks.git&quot;&gt;https://github.com/willkoehler/opsworks-cookbooks.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This cookbook also disables &lt;code class=&quot;highlighter-rouge&quot;&gt;delete_cached_copy&lt;/code&gt; so that a cached copy of the app code is kept
between deploys, speeding up deployment.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/stack_configuration_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Save” to save your changes.&lt;/p&gt;

&lt;h2 id=&quot;9-start-the-instance&quot;&gt;9. Start the instance&lt;/h2&gt;

&lt;p&gt;Now everything is ready to go. Let’s start our instance. This will provision the server, boot it,
and install all the software needed to run our app.&lt;/p&gt;

&lt;p&gt;Use the Navigation menu to go to the Instances page. Click “Start All Instances”. It will take ~10
minutes to boot and configure the server.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/start_instance.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;10-deploy-the-app&quot;&gt;10. Deploy the app&lt;/h2&gt;

&lt;p&gt;Once the instance is online, we can deploy the app. Use the Navigation menu to go to the Apps
page. Click “Deploy” under Actions for your app. Enable “Migrate database” so OpsWorks sets
up the database structure during the deployment.&lt;/p&gt;

&lt;div class=&quot;full shadow rounded&quot;&gt;&lt;img src=&quot;/images/ops-works/deploy.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click “Deploy” to start the deployment.&lt;/p&gt;

&lt;h2 id=&quot;11-login-via-ssh&quot;&gt;11. Login via SSH&lt;/h2&gt;

&lt;p&gt;We’re almost done. But, depending on your app, there may be a few steps that need to
be done by hand via SSH after the first deploy.&lt;/p&gt;

&lt;p&gt;For example, my app has database seeds. OpsWorks creates the database structure
but it doesn’t do anything else. To seed the database you must login via SSH.&lt;/p&gt;

&lt;p&gt;You will need the SSH key you assigned to the stack earlier. You also need the public
IP address of the instance, which you can get from the Instances page.&lt;/p&gt;

&lt;p&gt;SSH into the instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ssh -i your-private-key ubuntu@your_domain_or_ip_address&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OpsWorks creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; user to deploy and manage the Rails application. Any application
work you do on the server should be done as the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; user. In this case I’m going to seed
the database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo su deploy
cd /srv/www/your_app_name/current/
RAILS_ENV=production bundle exec rake db:seed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ready-to-go&quot;&gt;Ready to go&lt;/h2&gt;

&lt;p&gt;That’s everything. Point your browser to the public IP and your app should be live. If you have
problems, check the production log: &lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/www/your_app_name/shared/log/production.log&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;future-deployments&quot;&gt;Future deployments&lt;/h2&gt;

&lt;p&gt;Future deployments are easy. Check in your code and push to your deploy repo/branch.
Use the Navigation menu to go to the Apps page. Click “Deploy” under Actions for your app.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-posts&quot;&gt;Upcoming posts&lt;/h2&gt;

&lt;p&gt;I wanted to keep this post focused on the core steps to deploying a Rails app. But there’s more
to cover. I have two more posts coming up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Snapshots for MySQL Backup in AWS OpsWorks&lt;/li&gt;
  &lt;li&gt;Manage Your App’s secrets.yml with AWS OpsWorks&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Vertically Align Content With CSS Using This One Weird Trick</title>
   <link href="http://willkoehler.net/2014/08/28/vertically-align-content-with-css-using-this-one-weird-trick.html"/>
   <published>2014-08-28T00:00:00-04:00</published>
   <updated>2014-09-01T12:00:00-04:00</updated>
   <id>http://willkoehler.net/2014/08/28/vertically-align-content-with-css-using-this-one-weird-trick</id>
   <content type="html">&lt;p&gt;Phil Karlton famously said “there are only two hard things in computer science: cache invalidation
and naming things”. I would add a third: vertically aligning content with CSS.&lt;/p&gt;

&lt;h2 id=&quot;the-scenario&quot;&gt;The scenario&lt;/h2&gt;

&lt;p&gt;We want to vertically align variable height content within a wrapper div.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#493ACC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wrapper'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    This should be&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    vertically centered
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Also this
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;content&quot;&gt;
    This should be&lt;br /&gt;
    vertically centered
  &lt;/div&gt;
  &lt;div class=&quot;content&quot;&gt;
    Also this
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;just-use-vertical-alignmiddle&quot;&gt;Just use vertical-align:middle?&lt;/h2&gt;

&lt;p&gt;Most people (myself included) expect that adding &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align:middle&lt;/code&gt; to the wrapper will
do this trick. But &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align&lt;/code&gt; doesn’t set the alignment of content within a wrapper, it sets the
alignment of inline elements relative to each other.&lt;/p&gt;

&lt;p&gt;Let’s try some variations of &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align&lt;/code&gt; and see how it works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text big'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;BIG text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text small'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;SMALL text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.text.big&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.text.small&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;/* this is the default */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;boundary&quot;&gt;
  &lt;span class=&quot;text big&quot;&gt;BIG text&lt;/span&gt;
  &lt;span class=&quot;text small&quot;&gt;SMALL text&lt;/span&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;boundary&quot;&gt;
  &lt;span class=&quot;text big&quot; style=&quot;vertical-align:top&quot;&gt;BIG text&lt;/span&gt;
  &lt;span class=&quot;text small&quot; style=&quot;vertical-align:top&quot;&gt;SMALL text&lt;/span&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;boundary&quot;&gt;
  &lt;span class=&quot;text big&quot; style=&quot;vertical-align:bottom&quot;&gt;BIG text&lt;/span&gt;
  &lt;span class=&quot;text small&quot; style=&quot;vertical-align:bottom&quot;&gt;SMALL text&lt;/span&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;boundary&quot;&gt;
  &lt;span class=&quot;text big&quot; style=&quot;vertical-align:middle&quot;&gt;BIG text&lt;/span&gt;
  &lt;span class=&quot;text small&quot; style=&quot;vertical-align:middle&quot;&gt;SMALL text&lt;/span&gt;
&lt;/div&gt;

&lt;h2 id=&quot;making-vertical-alignmiddle-work-for-you&quot;&gt;Making vertical-align:middle work for you&lt;/h2&gt;

&lt;p&gt;Going back to the original scenario, instead of applying &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align:middle&lt;/code&gt; to the wrapper,
let’s apply &lt;code class=&quot;highlighter-rouge&quot;&gt;vertical-align:middle&lt;/code&gt; to the content. Seems counter-intuitive, but bear with me.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#493ACC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This should be&lt;br /&gt;
    vertically centered
  &lt;/div&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    Also this
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We’re getting closer. Let’s add a third element with 100% height&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wrapper'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'height:100%'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    I would like this&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    to be vertically centered
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Also this
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;wrapper&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle;height:100%&quot;&gt;&amp;nbsp;&lt;/div&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This should be&lt;br /&gt;
    vertically centered
  &lt;/div&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    Also this
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is starting to look promising!&lt;/p&gt;

&lt;h2 id=&quot;make-css-do-the-work-for-us&quot;&gt;Make CSS do the work for us&lt;/h2&gt;

&lt;p&gt;Manually adding a third element to vertically align things is a burden. So let’s
have css do that for us with a &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; pseudo element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* so we can see what's going on */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wrapper'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    I would like this&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    to be vertically centered
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Also this
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;wrapper with_centering visible_centering broken_wrapping&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This should be&lt;br /&gt;
    vertically centered
  &lt;/div&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    Also this
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It’s working! Now remove the red border from the pseudo element and… Voila&lt;/p&gt;

&lt;div class=&quot;wrapper with_centering&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This should be&lt;br /&gt;
    vertically centered
  &lt;/div&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    Also this
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;edge-cases&quot;&gt;Edge cases&lt;/h2&gt;

&lt;p&gt;Well this is awesome. But you knew there would be edge cases right? Consider this scenario:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wrapper'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    This text should wrap as needed
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;wrapper with_centering&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This text should wrap as needed
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Your customer views the page on a small device, or resizes their browser and…&lt;/p&gt;

&lt;div style=&quot;height: 250px&quot;&gt;
  &lt;div class=&quot;wrapper with_centering broken_wrapping&quot; style=&quot;width:200px&quot;&gt;
    &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
      This text should wrap as needed
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What happened?? The text wraped, but the content dropped below the wrapper. Let’s make
our before pseudo element visible again.&lt;/p&gt;

&lt;div style=&quot;height: 250px&quot;&gt;
  &lt;div class=&quot;wrapper with_centering broken_wrapping visible_centering&quot; style=&quot;width:200px&quot;&gt;
    &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
      This text should wrap as needed
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can see what happened. The &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; pseudo element is an inline-block element. So
it’s getting wrapped as well. We can fix that with another trick. Add a negative right
margin to the &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; pseudo element so the pseudo element doesn’t take up any horizontal
space.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-.35em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the text is wrapping like it should.&lt;/p&gt;

&lt;div class=&quot;wrapper with_centering&quot; style=&quot;width:200px&quot;&gt;
  &lt;div class=&quot;content&quot; style=&quot;vertical-align:middle&quot;&gt;
    This text should wrap as needed
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;all-together-now&quot;&gt;All together now&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-.35em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#493ACC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wrapper'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    This should be&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    vertically centered
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Also this
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve used many tricks over the years to vertically align content. They all have tradeoffs. Some
add a lot of noise to the CSS. Others (like using &lt;code class=&quot;highlighter-rouge&quot;&gt;display:table-cell&lt;/code&gt;) have side effects. I’ve just
recently discovered this trick, but I think it’s going to be my new go-to solution. In terms of
compatibility, it works on all modern browsers + IE8.&lt;/p&gt;

&lt;p&gt;Thanks to Chris Coyler for the &lt;a href=&quot;http://css-tricks.com/centering-in-the-unknown/&quot;&gt;idea&lt;/a&gt; and
Gary Turner for the &lt;a href=&quot;http://gtwebdev.com/workshop/vcenter/vcenter-inline-css.php&quot;&gt;original work&lt;/a&gt;.&lt;/p&gt;

&lt;!-- styles for this post --&gt;
&lt;style&gt;
  .vaswc .wrapper {
    height: 150px;
    border: 1px solid #CCC;
    text-align: center;
    margin-bottom: 2em;
  }

  .vaswc .wrapper.with_centering:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
    margin-right: -.35em;
  }

  .vaswc .wrapper.with_centering.visible_centering:before {
    border: 1px solid red;
  }

  .vaswc .wrapper.with_centering.broken_wrapping:before {
    margin-right: 0em;
  }

  .vaswc .content {
    display: inline-block;
    border: 1px solid #493ACC;
    text-align: center;
    padding: 10px;
  }

  .vaswc .boundary {
    border: 1px solid #CCC;
    padding: 0 15px;
    margin-bottom: 2em;
  }

  .vaswc .text {
    color: #666;
    vertical-align: baseline;
  }

  .vaswc .text.big {
    font-size: 2.3em;
    margin-right: 10px;
  }

  .vaswc .text.small {
    font-size: 1em;
  }
&lt;/style&gt;

</content>
 </entry>
 
 <entry>
   <title>Save 50 Hours Setting up Your Jekyll Blog</title>
   <link href="http://willkoehler.net/2014/08/26/save-50-hours-setting-up-your-jekyll-blog.html"/>
   <published>2014-08-26T00:00:00-04:00</published>
   <updated>2014-10-17T12:00:00-04:00</updated>
   <id>http://willkoehler.net/2014/08/26/save-50-hours-setting-up-your-jekyll-blog</id>
   <content type="html">&lt;p&gt;When I decided to start blogging, I explored all the major blogging platforms. I quickly came to the conclusion
that, in order to get exactly what I wanted, I would need to have full control of the design and code.&lt;/p&gt;

&lt;p&gt;As a Ruby developer, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; was a natural choice. Jekyll is a static site generator that’s
“blogging aware”. “Blogging aware” means that Jekyll has conventions for managing your blog posts. You put all your
posts in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts/&lt;/code&gt; folder. Jekyll generates pages for them and gives you template variables to index through
the pages.&lt;/p&gt;

&lt;p&gt;In addition to supporting blogs out of the box, Jekyll had everything else I wanted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Good &lt;a href=&quot;http://jekyllthemes.org&quot;&gt;themes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support for source-code highlighting&lt;/li&gt;
  &lt;li&gt;Posts can be written in &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Easy &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;integration&lt;/a&gt; with Github pages (free hosting!)&lt;/li&gt;
  &lt;li&gt;Support for layouts, partials, and other features that make it a pleasure to use.&lt;/li&gt;
  &lt;li&gt;Easy to get your head around the entire site. No magic. Nothing is hidden.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyll-incorporated-theme&quot;&gt;Jekyll Incorporated Theme&lt;/h2&gt;

&lt;p&gt;The next thing I needed was a theme. I quickly settled on &lt;a href=&quot;http://incorporated.sendtoinc.com&quot;&gt;Jekyll Incorporated&lt;/a&gt;.
It’s clean, simple, and very “Medium-like”. Thanks &lt;a href=&quot;https://sendtoinc.com/&quot;&gt;Kippt, Inc.&lt;/a&gt; for sharing this awesome theme
with the community.&lt;/p&gt;

&lt;p&gt;Jekyll Incorporated was built to be easily customized via &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main.css&lt;/code&gt;. So I thought I would
just fork the theme and customize it for my needs. It would be easy, right?&lt;/p&gt;

&lt;p&gt;In theory that was probably right. But I noticed a few minor problems with the responsive design of the
theme. The blog cover images weren’t resizing nicely as they were in the demo site. I realized that this was
because Kippt had made improvements to their blog after open-sourcing the theme.&lt;/p&gt;

&lt;h2 id=&quot;improving-on-jekyll-incorporated-theme&quot;&gt;Improving on Jekyll Incorporated Theme&lt;/h2&gt;

&lt;p&gt;I figured I would fix the cover images and then start writing posts. But that one fix revealed other
issues in the code. One change led to another. I ended up making 40 commits in all. To make this harder
on myself, I didn’t just tear into the code. I made all the changes in a way that could be merged back
upstream, preserving the design and original intent of the theme.&lt;/p&gt;

&lt;p&gt;None of this is to take away from the original work Kippt, Inc put into the theme. They created an awesome
foundation for me to build on. There’s no way I could have done this on my own.&lt;/p&gt;

&lt;h3 id=&quot;remove-bootstrapcss&quot;&gt;Remove Bootstrap.css&lt;/h3&gt;

&lt;p&gt;I noticed that the theme included &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.scss&lt;/code&gt;, containing all of Twitter Bootstrap. But none of the
Bootstrap features like the grid, forms, or typography were being used. &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.scss&lt;/code&gt; was only
providing a CSS reset (a cross-browser foundation to build the rest of the css on top of) and a few scattered,
random styles.&lt;/p&gt;

&lt;p&gt;To fix this, I pulled in my favorite css reset: &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;normalize.css&lt;/a&gt;. I
then methodically went through bootstrap.scss, commenting out chunks, and looking for rules that were
still being used by comparing the before and after pages in two browser tabs.&lt;/p&gt;

&lt;p&gt;When I was done, I removed &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.scss&lt;/code&gt; and moved the rules that were still being using into into &lt;code class=&quot;highlighter-rouge&quot;&gt;base.scss&lt;/code&gt;.
Below are the rules I needed to save&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;border-box&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;sizing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;everything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-moz-box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(other&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;base.scss)&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.428571429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(other&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;base.scss)&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The net change was 1647 lines of css removed. Here’s &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/460ca42a011c075d0fc2d63f86cc6940dac3d4ca#diff-1003e390ef395b0f33d4f1a90fb9e6c6R42&quot;&gt;the commit&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;improve-source-code-highlighting&quot;&gt;Improve source-code highlighting&lt;/h3&gt;

&lt;p&gt;Out of the box, Jekyll supports source-code highlighting using &lt;a href=&quot;http://pygments.org&quot;&gt;pygments&lt;/a&gt;.
You don’t need to know anything about pygments. Wrap your source code in &lt;code class=&quot;highlighter-rouge&quot;&gt;highlight&lt;/code&gt; tags and
it “just works”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;linenos&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
class User &amp;lt; ActiveRecord::Base
  # Wow this Ruby source code highlighting looks great!
  has_many :user_assignments, :dependent =&amp;gt; :destroy
  has_many :hospitals, :through =&amp;gt; :user_assignments
end
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endhighlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is rendered as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Wow this Ruby source code highlighting looks great!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dependent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospitals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:through&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The theme already included Github’s syntax highlighting stylesheet:
&lt;a href=&quot;http://jekyllrb.com/docs/templates/#stylesheets-for-syntax-highlighting&quot;&gt;syntax.css&lt;/a&gt;.
I added a few rules to clean up the look and prevent long lines from wrapping.&lt;/p&gt;

&lt;p&gt;Before improvements&lt;/p&gt;

&lt;div class=&quot;before_syntax_fixes&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dependent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospitals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:through&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Ugly, but 5x faster than op2 and op3&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Takes 2ms&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:grid_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LEFT JOIN user_assignments ON user_id = users.id LEFT JOIN hospitals ON hospitals.id = hospital_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
                           &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users.id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'min(hospitals.name) as first_hospital_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;After improvements&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dependent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospitals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:through&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_assignments&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Ugly, but 5x faster than op2 and op3&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Takes 2ms&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:grid_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LEFT JOIN user_assignments ON user_id = users.id LEFT JOIN hospitals ON hospitals.id = hospital_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
                           &lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users.id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'min(hospitals.name) as first_hospital_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks &lt;a href=&quot;http://demisx.github.io/jekyll/2014/01/13/improve-code-highlighting-in-jekyll.html&quot;&gt;Dmitri Moore&lt;/a&gt;
for the ideas. Here’s &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/198b31ea605fdc959ba23114f9292bddc939b9a7&quot;&gt;the commit&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;clean-up-configyml&quot;&gt;Clean up config.yml&lt;/h3&gt;

&lt;p&gt;My philosophy on code and config is: the less the better. I went through config.yml line by line, referencing
the Jekyll documentation and Googling information as needed. Almost everything could go. Most of the config
items were simply re-stating Jekyll’s defaults. I also removed references to alternative markdown parsers,
such as rdiscount, maruku, and redcarpet. Jekyll defaults to Kramdown for parsing markdown. Unless you’re
doing something really specialized, there’s no need to deviate from this default.&lt;/p&gt;

&lt;p&gt;The net change was 56 lines of config removed (the remaining config was almost all theme-specific)&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/f7ea94058a797b969724dd35bb0a75ce829fcc7e&quot;&gt;the commit&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;fix-feedxml&quot;&gt;Fix feed.xml&lt;/h3&gt;

&lt;p&gt;I don’t know much about RSS. I don’t even know if anyone will use it. But since RSS was already in
the theme, I decided to keep it and fix it. Most of the fixes were obvious. I used the
&lt;a href=&quot;http://validator.w3.org/feed/&quot;&gt;W3C Feed Validation Service&lt;/a&gt; to check the feed and Googled the errors
I couldn’t figure out on my own.&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/1aa854cea9e856d7c07c58c3e0be5dbfe51b939a&quot;&gt;the commit&lt;/a&gt;.
Update: I’ve made &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/2d8cfb7629cde63dc31a8bbbb11d9e5e62b90d18&quot;&gt;more changes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-github-icon&quot;&gt;Add Github icon&lt;/h3&gt;

&lt;p&gt;I wanted to have a link to my Github profile in the social icons. The hard work was already done for me
by &lt;a href=&quot;https://github.com/kippt/jekyll-incorporated/pull/17&quot;&gt;@vdragsic&lt;/a&gt;. I tweaked the icon size to make
it easier to see. This led to some weird rendering behavior and strange css that had to be cleaned up.&lt;/p&gt;

&lt;p&gt;Before tweaks. Notice Github icon is small and not immediately recognizable. All social icons are too low.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://willkoehler.net/images/social-icons-before-tweaks.png&quot; alt=&quot;Social icons before tweaks&quot; style=&quot;width:239px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After tweaks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://willkoehler.net/images/social-icons-after-tweaks.png&quot; alt=&quot;Social icons after tweaks&quot; style=&quot;width:239px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I broke this change into two commits: &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/f461bd5dec11bfe12c6fbb6cd79eaf12af690219&quot;&gt;Add Github icon&lt;/a&gt;
and &lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/9604230187353995e81db3fda21e289c63661023&quot;&gt;Tweak styling&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;remove-unused-css-rules&quot;&gt;Remove unused css rules&lt;/h3&gt;

&lt;p&gt;I went through and cleaned up all the unused css rules. Unused rules add to page weight and, more importantly,
add to the cognitive load reading the css.&lt;/p&gt;

&lt;p&gt;Tracking down the unused rules wasn’t hard. Since I wanted a better understanding of the css,
I did it by hand. I searched for each rule in the css, deleted the ones that weren’t used in the HTML,
making sure I didn’t break anything along the way.&lt;/p&gt;

&lt;p&gt;These changes are in two commits:
&lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/00ff93d79cffd6b8291de335b8a850cf65bbcd3e&quot;&gt;Commit 1&lt;/a&gt; and
&lt;a href=&quot;https://github.com/willkoehler/my_blog/commit/86e17a527661910e6a52924df9c620bd1b2a3b7b&quot;&gt;Commit 2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;much-more&quot;&gt;Much more…&lt;/h3&gt;

&lt;p&gt;There are a lot more fixes and refinements. You can see all the detail in the &lt;a href=&quot;https://github.com/willkoehler/my_blog/commits/open_source&quot;&gt;open_source branch&lt;/a&gt;.
Feel free to use this as a starting point for your blog. Maybe the changes will be merged back into
Jekyll Incorporated. I submitted a &lt;a href=&quot;https://github.com/kippt/jekyll-incorporated/pull/24&quot;&gt;pull request&lt;/a&gt;. But it’s a lot of
changes to merge back upstream.&lt;/p&gt;

&lt;h2 id=&quot;development-continues&quot;&gt;Development continues&lt;/h2&gt;

&lt;p&gt;In the meantime, I’ve moved ahead with my blog and have started making non-compatible changes to customize
the theme for my needs. These include more css fixes and design refinements. If it’s something that looks useful,
feel free to fork the &lt;a href=&quot;https://github.com/willkoehler/my_blog&quot;&gt;master branch&lt;/a&gt; to get the latest.&lt;/p&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources&lt;/h2&gt;

&lt;p&gt;Mike Greiling has some great articles on Jekyll on his blog (PixelCog).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pixelcog.com/blog/2013/jekyll-from-scratch-introduction/&quot;&gt;Jekyll From Scratch - Getting Started&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://pixelcog.com/blog/2013/jekyll-from-scratch-core-architecture/&quot;&gt;Jekyll From Scratch - Core Architecture&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://pixelcog.com/blog/2013/jekyll-from-scratch-extending-jekyll/&quot;&gt;Jekyll From Scratch - Extending Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;!-- styles to demo source-code highlighting before fixes --&gt;
&lt;style&gt;
  .before_syntax_fixes .highlight table td.gutter {
    padding: 0;
    color: #fff;
    border-right: none;
  }

  .before_syntax_fixes .highlight table td.code {
    padding: 0;
  }

  .before_syntax_fixes .highlight table pre {
    margin: 1em 0;
    font-family: monospace, monospace;
  }
&lt;/style&gt;

</content>
 </entry>
 
 
</feed>